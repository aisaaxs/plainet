services:
  app:
    image: plainet
    container_name: plainet_app
    restart: always
    build:
      context: ./
      target: dev   # Use 'prod' if you want to build a production image
      dockerfile: Dockerfile
      no_cache: false
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/plainet_db?schema=public
      - COMPOSE_BAKE=true
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:16
    container_name: plainet_database
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: plainet_db
    ports:
      - '5432:5432'
    volumes:
      - plainet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  plainet_postgres_data:
  plainet_node_modules:
  plainet_next: